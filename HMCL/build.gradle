/*
 * Hello Minecraft! Launcher.
 * Copyright (C) 2013  huangyuhui <huanghongxun2008@126.com>
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see {http://www.gnu.org/licenses/}.
 */
import java.util.jar.JarFile
import java.util.jar.Pack200
import java.util.zip.GZIPOutputStream
import java.security.MessageDigest
import java.util.jar.JarOutputStream
import java.util.zip.ZipEntry
import java.util.zip.ZipFile

plugins {
    id "edu.sc.seis.macAppBundle" version "2.1.8"
    id "me.tatarka.retrolambda" version "3.7.0"
    id 'edu.sc.seis.launch4j' version '2.4.2'
    //id "org.jetbrains.kotlin.jvm" version "1.1.2-2"
}

if (!hasProperty('mainClass')) {
    ext.mainClass = 'org.jackhuang.hmcl.Main'
}

def buildnumber = System.getenv("TRAVIS_BUILD_NUMBER")
if (buildnumber == null)
buildnumber = System.getenv("BUILD_NUMBER")
if (buildnumber == null)
buildnumber = "60"
    
def versionroot = System.getenv("VERSION_ROOT")
if (versionroot == null)
versionroot = "2.7.10"

String mavenGroupId = 'HMCL'
String mavenVersion = versionroot + '.' + buildnumber
String bundleName = "Hello Minecraft! Launcher"

group = mavenGroupId
version = mavenVersion

String mavenArtifactId = name

task generateSources(type: Sync) {
    from 'src/main/java'
    into "$buildDir/generated-src"
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            'HELLO_MINECRAFT_LAUNCHER_VERSION_FOR_GRADLE_REPLACING': mavenVersion
        ])
}
compileJava.setSource "$buildDir/generated-src"
compileJava.dependsOn generateSources

configurations {
    coreCompile.extendsFrom compile
    coreRuntime.extendsFrom runtime
}

configure(install.repositories.mavenInstaller) {
    pom.project {
        groupId = mavenGroupId
        artifactId = mavenArtifactId
        version = mavenVersion
    }
}

dependencies {
    compile project(":HMCLaF")
    compile project(":HMCLAPI")
    compile project(":HMCLCore")
}

retrolambda {
    javaVersion = JavaVersion.VERSION_1_7
}

jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    
    manifest {
        attributes 'Created-By'        : 'Copyright(c) 2013-2017 huangyuhui.',
                   'Main-Class'        : mainClass
    }
    
    doLast {
        new File("build/signed").mkdirs()
        ant.signjar(signedjar: archivePath, jar: archivePath,
            keystore: "HMCL.keystore", storepass: "123456",
            alias: "HMCL")
        
        def messageDigest = MessageDigest.getInstance("SHA1")
        archivePath.eachByte 1024 * 1024, { byte[] buf, int bytesRead ->
            messageDigest.update(buf, 0, bytesRead);
        }
        def sha1Hex = new BigInteger(1, messageDigest.digest()).toString(16).padLeft(40, '0')
        def fileEx = new File(project.buildDir, "libs/" + archivePath.getName() + ".sha1")
        if (!fileEx.exists()) fileEx.createNewFile()
        fileEx.append sha1Hex
    }
}

launch4j {
    supportUrl = 'http://www.mcbbs.net/thread-142335-1-1.html'
    jreMinVersion = '1.7.0'
    
    mainClassName = mainClass
    icon = new File(project.buildDir,  '../icon.ico').absolutePath
    version = mavenVersion
    downloadUrl = 'http://java.com/download'
    copyright = "Copyright(c) 2013-2017 huangyuhui."
    
    jar = new File(project.buildDir, 'libs/' + mavenGroupId + '-' + mavenVersion + '.jar').absolutePath
    outfile = mavenGroupId + '-' + mavenVersion + '.exe'
    messagesJreVersionError = 'This application requires a Java Runtime Environment installation, or the runtime is corrupted.\n\u6ca1\u6709\u627e\u5230\u004a\u0061\u0076\u0061\u8fd0\u884c\u65f6\uff0c\u8bf7\u4e0d\u8981\u4f7f\u7528\u7eff\u8272\u004a\u0061\u0076\u0061\uff0c\u8bf7\u4f7f\u7528\u5b89\u88c5\u7248\u7684\u004a\u0061\u0076\u0061\uff0c\u70b9\u51fb\u786e\u5b9a\u8fdb\u5165\u004a\u0061\u0076\u0061\u5b89\u88c5\u9875\u9762\u3002'
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        exclude 'icon.icns'
    }
}

task makeExecutable(dependsOn: jar) doLast {
    ext {
        jar.classifier = ''
        makeExecutableinjar = jar.archivePath
        jar.classifier = ''
        makeExecutableoutjar = jar.archivePath
        jar.classifier = ''
    }
    def loc = new File(project.buildDir, "libs/" + makeExecutableoutjar.getName().substring(0, makeExecutableoutjar.getName().length()-4)+".exe")
    def fos = new FileOutputStream(loc)
    def is = new FileInputStream(new File(project.buildDir, '../HMCLauncher.exe'))
    int read
    def bytes = new byte[8192]
    while((read = is.read(bytes)) != -1)
    fos.write(bytes, 0, read);
    is.close()
    is = new FileInputStream(makeExecutableinjar)
    while((read = is.read(bytes)) != -1)
    fos.write(bytes, 0, read);
    is.close()
    fos.close()
    
}

task makePackGZ(dependsOn: jar) doLast {
    ext {
        jar.classifier = ''
        makeExecutableinjar = jar.archivePath
        jar.classifier = ''
        makeExecutableoutjar = jar.archivePath
        jar.classifier = ''
    }
    def loc = new File(project.buildDir, "libs/" + makeExecutableoutjar.getName().substring(0, makeExecutableoutjar.getName().length()-4)+".pack.gz")
    def os = new GZIPOutputStream(new FileOutputStream(loc))
    Pack200.newPacker().pack new JarFile(makeExecutableinjar), os
    os.close()
    
    def messageDigest = MessageDigest.getInstance("SHA1")
    loc.eachByte 1024 * 1024, { byte[] buf, int bytesRead ->
        messageDigest.update(buf, 0, bytesRead);
    }
    def sha1Hex = new BigInteger(1, messageDigest.digest()).toString(16).padLeft(40, '0')
    def fileEx = new File(project.buildDir, "libs/" + makeExecutableoutjar.getName().substring(0, makeExecutableoutjar.getName().length()-4)+".pack.gz.sha1")
    if (!fileEx.exists()) fileEx.createNewFile()
    fileEx.append sha1Hex
}

task macAppCompressed(type: Zip, dependsOn: createApp) doLast {
    archiveName "HMCL-$mavenVersion-MacOSApp.zip"
    include '**'
    destinationDir file("$buildDir/libs/")
    from "$buildDir/macApp"
}

macAppBundle {
    mainClassName = mainClass
    icon = "src/main/icon.icns"
    javaProperties.put("apple.laf.useScreenMenuBar", "true")
}

build.dependsOn makeExecutable
build.dependsOn makePackGZ
build.dependsOn macAppCompressed